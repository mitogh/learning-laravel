<?php namespace Tests\App\Http\Controllers\Auth;

use App\Http\Controllers\Auth\UserRepository;
use App\User as UserModel;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Laravel\Socialite\Contracts\User;

class UserRepositoryTest extends \Codeception\Test\Unit
{
    use RefreshDatabase;

    /** @var UserRepository */
    protected $repository;

    /** @var User */
    protected $user;

    protected function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub
        $this->repository = app()->make( UserRepository::class );
        $this->user = (new class implements User
        {
            /**
             * Get the unique identifier for the user.
             *
             * @return string
             */
            public function getId()
            {
                return 1;
            }

            /**
             * Get the nickname / username for the user.
             *
             * @return string
             */
            public function getNickname()
            {
                return 'Nickname';
            }

            /**
             * Get the full name of the user.
             *
             * @return string
             */
            public function getName()
            {
                return 'Full Name';
            }

            /**
             * Get the e-mail address of the user.
             *
             * @return string
             */
            public function getEmail()
            {
                return 'user@user.com';
            }

            /**
             * Get the avatar / image URL for the user.
             *
             * @return string
             */
            public function getAvatar()
            {
                return 'images/avatar.jpg';
            }
        });
    }

    /**
     * It should trigger an exception if user is not provided
     *
     * @test
     */
    public function ShouldTriggerAnExceptionIfUserIsNotProvided()
    {
        $this->expectException( \InvalidArgumentException::class, 'Make sure to provide a valid user contract' );
        $this->expectExceptionMessage( 'Make sure to provide a valid user contract' );
        $this->repository->find_or_create();
    }

    /**
     * It should return a new user if none exists
     *
     * @test
     */
    public function ShouldReturnANewUserIfNoneExists()
    {
        $this->assertEmpty( UserModel::count() );
        $this->assertFalse( UserModel::where( 'key', $this->user->getId() )->exists() );

        $user = $this->repository->set_user( $this->user )->find_or_create();
        $this->assertInstanceOf( UserModel::class, $user );
        $this->assertTrue( $user->wasRecentlyCreated );
        $this->assertEquals( 1, UserModel::count() );
        $this->assertTrue( UserModel::where( 'key', $this->user->getId() )->exists() );
    }

    /**
     * It should return an already existing user by key
     *
     * @test
     */
    public function ShouldReturnAnAlreadyExistingUserByKey()
    {
        $this->assertEmpty( UserModel::count() );
        $this->assertFalse( UserModel::where( 'key', $this->user->getId() )->exists() );

        $user = $this->repository->set_user( $this->user )->find_or_create();

        $this->assertInstanceOf( UserModel::class, $user );
        $this->assertTrue( $user->wasRecentlyCreated );
        $this->assertEquals( 1, UserModel::count() );
        $this->assertTrue( UserModel::where( 'key', $this->user->getId() )->exists() );

        $user = $this->repository->set_user( $this->user )->find_or_create();

        $this->assertInstanceOf( UserModel::class, $user );
        $this->assertFalse( $user->wasRecentlyCreated );
        $this->assertEquals( 1, UserModel::count() );
        $this->assertTrue( UserModel::where( 'key', $this->user->getId() )->exists() );
    }

}
