<?php namespace Tests\App\Http\Controllers\Auth;

use App\Http\Controllers\Auth\UserRepository;
use App\User;
use Illuminate\Foundation\Testing\RefreshDatabase;

class UserRepositoryTest extends \Codeception\Test\Unit
{
    use RefreshDatabase;

    /** @var UserRepository */
    protected $repository;

    /**
     * @var \IntegrationTester
     */
    protected $tester;

    protected function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub
        $this->repository = app()->make( UserRepository::class );
    }

    /**
     * It should trigger an exception if user is not provided
     *
     * @test
     */
    public function ShouldTriggerAnExceptionIfUserIsNotProvided()
    {
        $this->expectException( \InvalidArgumentException::class, 'Make sure to provide a valid user contract' );
        $this->expectExceptionMessage( 'Make sure to provide a valid user contract' );
        $this->repository->find_or_create();
    }

    /**
     * It should return a new user if none exists
     *
     * @test
     */
    public function ShouldReturnANewUserIfNoneExists()
    {
        $user = $this->tester->givenASocialiteUser();
        $this->assertEmpty( User::count() );
        $this->assertFalse( User::where( 'key', $user->getId() )->exists() );

        $record = $this->repository->set_user( $user )->find_or_create();

        $this->assertInstanceOf( User::class, $record );
        $this->assertTrue( $record->wasRecentlyCreated );
        $this->assertEquals( 1, User::count() );
        $this->assertTrue( User::where( 'key', $user->getId() )->exists() );
    }

    /**
     * It should return an already existing user by key
     *
     * @test
     */
    public function ShouldReturnAnAlreadyExistingUserByKey()
    {
        $user = $this->tester->givenASocialiteUser();

        $this->assertEmpty( User::count() );
        $this->assertFalse( User::where( 'key', $user->getId() )->exists() );

        $record = $this->repository->set_user( $user )->find_or_create();

        $this->assertInstanceOf( User::class, $record );
        $this->assertTrue( $record->wasRecentlyCreated );
        $this->assertEquals( 1, User::count() );
        $this->assertTrue( User::where( 'key', $user->getId() )->exists() );

        $record = $this->repository->set_user( $user )->find_or_create();

        $this->assertInstanceOf( User::class, $record );
        $this->assertFalse( $record->wasRecentlyCreated );
        $this->assertEquals( 1, User::count() );
        $this->assertTrue( User::where( 'key', $user->getId() )->exists() );
    }

}
